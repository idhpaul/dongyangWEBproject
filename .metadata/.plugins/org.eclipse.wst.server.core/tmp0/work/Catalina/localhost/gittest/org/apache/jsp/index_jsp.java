/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.34
 * Generated at: 2018-11-28 02:05:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t<title>동양 E 도서관</title>\r\n");
      out.write("\t  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("\t<link rel = \"stylesheet\" href = \"DESIGN/css/bootstrap.css\">\r\n");
      out.write("\t<link rel = \"stylesheet\" href = \"DESIGN/css/animate.css\">\r\n");
      out.write("\t<link rel = \"stylesheet\" href = \"DESIGN/css/main.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 이쪽은 따로 나중에 css파일로 만들어서 저장해놓을것임 -->\r\n");
      out.write("<!-- 부트스트랩 이외에 내가 설정해놓은 디자인들 -->\r\n");
      out.write("\r\n");
      out.write(" <!-- 여기까지 --> \r\n");
      out.write("</head>\r\n");
      out.write("<style>\r\n");
      out.write("\t.mainback{\r\n");
      out.write("   color: black;\r\n");
      out.write("   position:relative;\r\n");
      out.write("    z-index:1;\r\n");
      out.write("  }\r\n");
      out.write("  .mainback:after{\r\n");
      out.write("    background-image:url(\"IMAGE/img/mainpage.jpg\");\r\n");
      out.write("    top:0;\r\n");
      out.write("    left:0;\r\n");
      out.write("    position:absolute;\r\n");
      out.write("    background-size:100%;\r\n");
      out.write("    opacity:0.5!important;\r\n");
      out.write("    filter:alpha(opacity=50);\r\n");
      out.write("    z-index:1;\r\n");
      out.write("    content:\"\";\r\n");
      out.write("    width:100%;\r\n");
      out.write("    height:100%;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<body data-spy=\"scroll\" data-target=\".navbar\" data-offset=\"50\">\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./HEADER/navbar.jsp", out, false);
      out.write("\r\n");
      out.write("\t<!-- 네비게이션 바 부분 은 후에 maintoolbar.jsp 파일로 변환시켜 include를 통해 불러올 생각을 해봄 -->\r\n");
      out.write("\t<!-- 섹션 처리부분  -->\r\n");
      out.write("\t<div id=\"section41\" class=\"container-fluid mainback\">\r\n");
      out.write("\t\t<div class=\"jumbotron\">\r\n");
      out.write("\t\t  <h1 class=\"animated fadeIn Title slow\">소개내용내용</h1>\r\n");
      out.write("\t\t\t  <div class=\"animated fadeIn conetent slower\">   \r\n");
      out.write("\t\t\t  <p>데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터</p>\r\n");
      out.write("\t\t\t  <p>데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터</p>\r\n");
      out.write("\t\t\t  <p>데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터데이터</p>\r\n");
      out.write("\t\t\t  </div>\r\n");
      out.write("\t\t  </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!-- 섹션41해당하는 부분 더 추가하려면 위에 형태 변경하고 스타일에 해당 아이디 등록 -->\r\n");
      out.write("\t<div id=\"section42\" class=\"container-fluid\">\r\n");
      out.write("\t<!-- 이부분 부터 부분 -->\r\n");
      out.write("\t\t<div id=\"myCarousel\" class=\"carousel slide\" data-ride=\"carousel\">\r\n");
      out.write("\t  <!-- 슬라이더의 갯수를 보여주는 부분 -->\r\n");
      out.write("\t  <!-- class에 active가 붙여진 부분을 가장 먼저 활성화 시켜 보여주게 됨 -->\r\n");
      out.write("\t  <ol class=\"carousel-indicators cusor\">\r\n");
      out.write("\t    <li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\r\n");
      out.write("\t    <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\r\n");
      out.write("\t  </ol>\r\n");
      out.write("\t\t  <!-- Wrapper for slides -->\r\n");
      out.write("\t    <div class=\"carousel-inner\">\r\n");
      out.write("\t      <div class=\"item active img1\">\r\n");
      out.write("\t        <img src=\"IMAGE/img/recommand.png\" alt=\"책이름\" >\r\n");
      out.write("\t      </div>\r\n");
      out.write("\t      <div class=\"item img1\">\r\n");
      out.write("\t      \t\t<div style = \"position : relative\">\r\n");
      out.write("\t\t\t        <div class=\"front1\" style = \"position: absolute;\"><img src=\"IMAGE/bookImage/01.jpg\" alt=\"책이름\" id=\"img2\"></div>\r\n");
      out.write("\t\t\t        <div class=\"back1\"><img src=\"IMAGE/img/recommand.png\" alt=\"책이름\"></div>\r\n");
      out.write("\t\t\t        <h3>보노보노처럼 살다니 다행이야</h3>\r\n");
      out.write("        \t\t\t<p>컨텐츠 내용 책줄거리 요약 DB에서 꺼내서 입력</p>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t      </div>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t\t  <!-- 이미지 좌우로 넘기는 키 설정 부분 -->\r\n");
      out.write("\t    <a class=\"left carousel-control\" href=\"#myCarousel\" data-slide=\"prev\">\r\n");
      out.write("\t      <span class=\"glyphicon glyphicon-chevron-left\"></span>\r\n");
      out.write("\t      <span class=\"sr-only\">Previous</span>\r\n");
      out.write("\t    </a>\r\n");
      out.write("\t    <a class=\"right carousel-control\" href=\"#myCarousel\" data-slide=\"next\">\r\n");
      out.write("\t      <span class=\"glyphicon glyphicon-chevron-right\"></span>\r\n");
      out.write("\t      <span class=\"sr-only\">Next</span>\r\n");
      out.write("\t    </a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script src = \"https://code.jquery.com/jquery-3.2.1.min.js\"></script>\r\n");
      out.write("\t<script src = \"DESIGN/js/bootstrap.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
